{
  "/www/actions-script.js": "/*\r\n* This file is licensed under the GPLv3 License Copyright (c) 2025 Sam Groveman\r\n* Contributors: Sam Groveman\r\n*/\r\n\r\n// Run code when page DOM is loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\tGETRequest(\"/actors/\", addActors);\r\n});\r\n\r\n\r\n// Adds all actors with their actions to the page\r\nfunction addActors(actors) {\r\n\tconsole.log(actors);\r\n\tconst holder = document.getElementById(\"actions\");\r\n\tlet html = '';\r\n\tif (actors.actors.length === 0) {\r\n\t\thtml ='<p>No available actions</p>';\r\n\t} else {\r\n\t    html = '<table><tr><th>Actor</th><th>Action</th><th>Execute</th></tr>';\r\n\t\tactors.actors.forEach(actor => {\r\n\t\t\tactor.actions.forEach(action =>{\r\n\t\t\t\thtml += '<tr><td>' + actor.description.name + '</td><td>' + action + '</td><td><a class=\"def-button\" onClick=\"executeAction(\\'' + actor.description.name + '\\',\\'' + action + '\\')\">Execute</a></td></tr>';\r\n\t\t\t});\r\n\t\t});\r\n\t\thtml += '</table>';\r\n\t}\r\n\tholder.innerHTML = html;\r\n}\r\n\r\n// Adds an action to the execution queue with any payload\r\nfunction executeAction(actor, action) {\r\n\tPOSTRequest(\"/actors/add\", \"Action added to queue\", {actorName: actor, actionName: action, payload: document.getElementById(\"payload\").value});\r\n}",
  "/www/actions.html": "\t<!--\r\n\tThis file is licensed under the GPLv3 License Copyright (c) 2025 Sam Groveman\r\n\tContributors: Sam Groveman\r\n\t-->\r\n\t<!DOCTYPE html>\r\n\t<html lang=\"en-us\">\r\n\t<head>        \r\n\t\t<link rel=\"stylesheet\" href=\"/main.css\">\r\n\t\t<script src=\"/ajax-script.js\"></script>\r\n\t\t<script src=\"/actions-script.js\"></script>\r\n\t\t<title>ESP32 Device Hub | Actions</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"wrapper\">\r\n\t\t\t<div class=\"home-button-container\">\r\n\t\t\t\t<a class=\"def-button\" href=\"/\">Home</a>\r\n\t\t\t</div>\r\n\t\t\t<h1>Actions</h1>\r\n\t\t\t<label for=\"payload\">Payload</label>\r\n\t\t\t<input class=\"normal-input\" type=\"text\" id=\"payload\">\r\n\t\t\t<div id=\"message\"></div>\r\n\t\t\t<div id=\"actions\"></div>\r\n\t\t</div>\r\n\t</body>\r\n\t</html>",
  "/www/ajax-script.js": "/*\n * This file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\n * Contributors: Sam Groveman\n * \n * This file contains AJAX functions for POST, PUT, and GET methods, as well as a file upload handler.\n * Please ensure the correct HTML elements are present in your page to use these functions.\n */\n\n// Send a POST request with an optional object of key/value pairs for parameters\n// Returns the response to the optional callback provided\nfunction POSTRequest(path, successMessage, params = {}, callback = null) {\n\tlet xhr = new XMLHttpRequest(), data = new FormData();\n\tdocument.getElementById('message').innerHTML = \"\";\n\txhr.responseType = 'json';\n\tif (Object.keys(params).length !== 0 ) {\n\t\tfor (let param in params) {\n\t\t\tdata.append(param, params[param]);\n\t\t}\n\t}\n\txhr.open('POST', path);\n\txhr.onload = function() {\n\t\tif (this.status !== 200) {\n\t\t\tdocument.getElementById('message').innerHTML = this.response;\n\t\t} else {\n\t\t\tdocument.getElementById('message').innerHTML = successMessage;\n\t\t\tif (callback !== null) {\n\t\t\t\tlet response = xhr.response;\n\t\t\t\tconsole.log(response);\n\t\t\t\tcallback(response);\n\t\t\t}\n\t\t}\n\t};\n\txhr.send(data); \n}\n\n// Send a PUT request with an optional object of key/value pairs for parameters\n// Returns the response to the optional callback provided\nfunction PUTRequest(path, successMessage, params = {}, callback = null) {\n\tlet xhr = new XMLHttpRequest(), data = new FormData();\n\tdocument.getElementById('message').innerHTML = \"\";\n\txhr.responseType = 'json';\n\tif (Object.keys(params).length !== 0 ) {\n\t\tfor (let param in params) {\n\t\t\tdata.append(param, params[param]);\n\t\t}\n\t}\n\txhr.open('PUT', path);\n\txhr.onload = function() {\n\t\tif (this.status != 200) {\n\t\t\tdocument.getElementById('message').innerHTML = this.response;\n\t\t} else {\n\t\t\tdocument.getElementById('message').innerHTML = successMessage;\n\t\t\tif (callback !== null) {\n\t\t\t\tlet response = xhr.response;\n\t\t\t\tconsole.log(response);\n\t\t\t\tcallback(response);\n\t\t\t}\n\t\t}\n\t};\n\txhr.send(data);\n}\n\n// Send a GET request with an optional object of key value pairs for parameters\n// Returns the response to the optional callback provided\nfunction GETRequest(path, callback = null, params = {}) {\n    let xhr = new XMLHttpRequest();\n\tdocument.getElementById('message').innerHTML = \"\";\n\txhr.responseType = 'json';\n    if (Object.keys(params).length !== 0 ) {\n\t\tlet first = true\n\t\tpath += \"?\";\n\t\tfor (let param in params) {\n\t\t\tif (first) {\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tpath += \"&\";\n\t\t\t}\n\t\t\tpath += param + \"=\" + params[param];\n\t\t}\n\t}\n    xhr.open('GET', path);\n\txhr.onload = function() {\n\t\tif (this.status != 200) {\n\t\t\tdocument.getElementById('message').innerHTML = this.response;\n\t\t} else if (callback !== null) {\n\t\t\tlet response = xhr.response;\n\t\t\tconsole.log(response);\n\t\t\tcallback(response);\n\t\t}\n\t};\n\txhr.send();\n}\n\n// File upload handler. Call uprog.init() first then call uprog.upload(\"<path>\")\nlet uprog = {\n\thBar: null,\n\thPercent: null,\n\thFile: null,\n\tinit: () => {\n\t\tuprog.hBar = document.getElementById('up-bar');\n\t\tuprog.hPercent = document.getElementById('up-percent');\n\t\tuprog.hFile = document.getElementById('up-file');\n\t\tuprog.hFile.disabled = false;\n\t},\n\tupdate: (percent) => {\n\t\tlet Percent = percent + '%';\n\t\tuprog.hBar.style.width = Percent;\n\t\tuprog.hPercent.innerHTML = Percent;\n\t\tif (Percent == '100%') { uprog.hFile.disabled = false; }\n\t},\n\tupload: (path) => {\n\t\tif (uprog.hFile.files.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet file = uprog.hFile.files[0];\n\t\tuprog.hFile.disabled = true;\n\t\tuprog.hFile.value = '';\n\t\tlet xhr = new XMLHttpRequest(), data = new FormData();\n\t\tdata.append('upfile', file);\n\t\txhr.open('POST', '/upload-file');\n\t\txhr.setRequestHeader('FILE_UPLOAD_PATH', path);\n\t\tlet percent = 0;\n\t\txhr.upload.onloadstart = () => { uprog.update(0); };\n\t\txhr.upload.onloadend = () => { uprog.update(100); };\n\t\txhr.upload.onprogress = (evt) => {\n\t\t\tpercent = Math.ceil((evt.loaded / evt.total) * 100);\n\t\t\tuprog.update(percent);\n\t\t};\n\t\txhr.onload = function() {\n\t\t\tif (this.status == 507) {\n\t\t\t\tdocument.getElementById('message').innerHTML = \"Not enough free storage for file!\";\n\t\t\t} else if (this.status != 201) {\n\t\t\t\tdocument.getElementById('message').innerHTML = this.response;\n\t\t\t} else {\n\t\t\t\tuprog.update(100);\n\t\t\t\tdocument.getElementById('message').innerHTML = 'File uploaded!';\n\t\t\t\tupdateFileList();\n\t\t\t\tgetFreeStorage();\n\t\t\t}\n\t\t};\n\t\txhr.send(data);\n\t}\n};",
  "/www/calibrate-script.js": "/*\n* This file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\n* Contributors: Sam Groveman\n*/\n\nlet sensorID = 0;\nlet calibrationStep = 0;\n\nconst calibrationResponse = Object.freeze({\n\terror: 0,\n\tdone: 1,\n\tnext: 2\n});\n\n// Run code when page DOM is loaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconst urlParams = new URLSearchParams(window.location.search);\n\tconsole.log(urlParams);\n\tconst holder = document.getElementById('calstep');\n\tif (!urlParams.has('id')) {\n\t\tholder.innerHTML = '<h2>No device selected</h2>'\n\t} else {\n\t\tif (urlParams.has('step')) { \n\t\t\tcalibrationStep = parseInt(urlParams.get('step'));\n\t\t}\n\t\tsensorID = parseInt(urlParams.get('id'));\n\t\tdoCalibrationStep(calibrationStep);\n\t}\n});\n\n// Runs a calibration step\nfunction doCalibrationStep(step) {\n\tPOSTRequest('/sensors/calibrate', 'Calibrating...', {\"sensor\": sensorID, \"step\": step}, receiveCalibrationResponse);\n}\n\n// Receives and processes the response of a calibration step\nfunction receiveCalibrationResponse(response) {\n\tconst holder = document.getElementById(\"calstep\");\n\tif (response.response === calibrationResponse.error) {\n\t\tholder.innerHTML = '<h2>Calibration error!</h2><p>' + response.message + '</p>';\n\t} else if (response.response === calibrationResponse.done) {\n\t\tholder.innerHTML = '<h2>Calibration done!</h2><p>' + response.message + '</p><div class=\"button-container\"><a href=\"/devices.html\" class=\"def-button\">Finish</a></div>';\n\t} else if (response.response === calibrationResponse.next) {\n\t\tlet content = '<h2>Calibration Step ' + calibrationStep + ' Completed</h2>';\n\t\tcalibrationStep++;\n\t\tcontent += '<p>' + response.message + '</p>'\n\t\tcontent += '<div class=\"button-container\"><button class=\"def-button\" onclick=\"doCalibrationStep(' + calibrationStep + ')\">Next</button></div>';\n\t\tholder.innerHTML = content;\n\t}\n}",
  "/www/calibrate.html": "<!--\r\nThis file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\nContributors: Sam Groveman\r\n-->\r\n<!DOCTYPE html>\r\n<html lang=\"en-us\">\r\n\t<head>        \r\n\t\t<link rel=\"stylesheet\" href=\"/main.css\">\r\n\t\t<script src=\"/ajax-script.js\"></script>\r\n\t\t<script src=\"/calibrate-script.js\"></script>\r\n\t\t<title>ESP32 Device Hub | Device Calibration</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"wrapper\">\r\n\t\t\t<h1>Device Calibration</h1>\r\n\t\t\t<div id=\"message\"></div>\r\n\t\t\t<div id=\"calstep\"></div>\r\n\t\t</div>\r\n\t</body>\r\n</html>",
  "/www/config-script.js": "/*\r\n* This file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\n* Contributors: Sam Groveman\r\n*/\r\n\r\n// Run code when page DOM is loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\tGETRequest(\"/config/\", addSettings);\r\n\tGETRequest('/time', addTime);\r\n\r\n});\r\n\r\n// Adds all settings to page\r\nfunction addSettings(config) {\r\n\tconst holder = document.getElementById(\"settings\");\r\n\tif (Object.keys(config).length === 0 ) {\r\n\t\tholder.innerHTML += '<p>No configurable options</p>';\r\n\t} else {\r\n\t\tfor (opt in config) {\r\n\t\t\tlet type = \"text\";\r\n\t\t\tlet step = 1;\r\n\t\t\tlet additionalAttrb = \"\";\r\n\t\t\tlet name = opt.replace(\" \", \"_\");\r\n\t\t\tif (typeof(config[opt]) === \"object\") {\r\n\t\t\t\tlet newhtml = '<div class=\"stacked-input\">\\\r\n\t\t\t\t<label for=\"' + name + '\">' + opt + '</label>\\\r\n\t\t\t\t<select class=\"normal-input\" name=\"' + name + '\">';\r\n\t\t\t\tconfig[opt].options.forEach((value) => {\r\n\t\t\t\t\tif (value === config[opt].current) {\r\n\t\t\t\t\t\tnewhtml += '<option class=\"normal-input\" value=\"' + value + '\" selected>' + value + '</option>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewhtml += '<option class=\"normal-input\" value=\"' + value + '\">' + value + '</option>';\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tnewhtml += '</select></div>'\r\n\t\t\t\tholder.innerHTML += newhtml;\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof(config[opt]) === \"number\") {\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\tif (!Number.isInteger(config[opt])) {\r\n\t\t\t\t\t\tstep = 0.01;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (typeof(config[opt]) === \"boolean\") {\r\n\t\t\t\t\ttype = \"checkbox\";\r\n\t\t\t\t\tif (config[opt] === true) {\r\n\t\t\t\t\t\tadditionalAttrb= \"checked\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (typeof(config[opt]) === \"string\") {\r\n\t\t\t\t\tconfig[opt] = config[opt].replaceAll('\"', '&quot;');\r\n\t\t\t\t\tif (name === \"webPassword\") {\r\n\t\t\t\t\t\ttype = \"password\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tholder.innerHTML += '<div class=\"stacked-input\"><label for=\"' + name + '\">' + opt + '</label>\\\r\n\t\t\t\t<input class=\"normal-input\" type=\"' + type + '\" name=\"' + name + '\" step=\"' + step + '\" value=\"' + config[opt] + '\" ' + additionalAttrb +'></div>';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Displays current time on device\r\nfunction addTime(response) {\r\n\tconst time = document.getElementById(\"time\");\r\n\tvar d = new Date(0);\r\n\td.setUTCSeconds(response);\r\n\ttime.innerHTML = d.toLocaleString();\r\n}\r\n\r\n// Parses and updates config for the sensor hub\r\nfunction updateConfig() {\r\n\tinputs = document.querySelectorAll('#settings input');\r\n\tlet new_config = {};\r\n\tArray.from(inputs).forEach((input) => {\r\n\t\tif (input.type === \"number\") {\r\n\t\t\tnew_config[input.name] = input.valueAsNumber;\r\n\t\t} else if (input.type === \"checkbox\") {\r\n\t\t\tnew_config[input.name] = input.checked;\r\n\t\t} else {\r\n\t\t\tnew_config[input.name] = input.value;\r\n\t\t}\r\n\t});\r\n\tinputs = document.querySelectorAll('#device select');\r\n\tArray.from(inputs).forEach((input) => {\r\n\t\tnew_config[input.name] = {\"current\": input.value};\r\n\t});\r\n\tconsole.log(new_config);\r\n\tPOSTRequest(\"/config\", \"Settings updated!\", {'save': true, 'config': JSON.stringify(new_config)});\r\n}",
  "/www/config.html": "<!--\r\nThis file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\nContributors: Sam Groveman\r\n-->\r\n<!DOCTYPE html>\r\n<html lang=\"en-us\">\r\n\t<head>        \r\n\t\t<link rel=\"stylesheet\" href=\"/main.css\">\r\n\t\t<script src=\"/ajax-script.js\"></script>\r\n\t\t<script src=\"/config-script.js\"></script>\r\n\t\t<title>ESP32 Device Hub | Settings</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"wrapper\">\r\n\t\t\t<div class=\"home-button-container\">\r\n\t\t\t\t<a class=\"def-button\" href=\"/\">Home</a>\r\n\t\t\t</div>\r\n\t\t\t<h1>Settings</h1>\r\n\t\t\t<h2 id=\"time\"></h2>\r\n\t\t\t<h2>Manage device hub settings below</h2>\r\n\t\t\t<div id=\"message\"></div>\r\n\t\t\t<div id=\"settings\"></div>\r\n\t\t\t<div class=\"button-container\">\r\n\t\t\t\t<button class=\"def-button\" id=\"setconfig\" onclick=\"updateConfig()\">Update Config</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</body>\r\n</html>",
  "/www/devices-script.js": "/*\r\n* This file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\n* Contributors: Sam Groveman\r\n*/\r\n\r\n// Run code when page DOM is loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\tGETRequest(\"/sensors/\", addSensors);\r\n\tGETRequest(\"/actors/\", addActors);\r\n\r\n});\r\n\r\n// Adds all connected sensors to the page\r\nfunction addSensors(sensors) {\r\n\tconst holder = document.getElementById(\"sensors\");\r\n\tif (sensors.sensors.length === 0) {\r\n\t\tholder.innerHTML ='<p>No active sensors</p>';\r\n\t} else {\r\n\t\tholder.innerHTML = '<div class=\"button-container\">\\r\\n';\r\n\t\tsensors.sensors.forEach(sensor => {\r\n\t\t\tholder.innerHTML += '<button class=\"def-button\" onclick=\"loadDevice(true,\\'' + sensor.description.name + '\\',' +  sensor.positionID +')\">' + sensor.description.name + '</button>';\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Adds all connected actors to the page\r\nfunction addActors(actors) {\r\n\tconst holder = document.getElementById(\"actors\");\r\n\tif (actors.actors.length === 0) {\r\n\t\tholder.innerHTML = '<p>No active actors</p>';\r\n\t} else {\r\n\t\tholder.innerHTML = '<div class=\"button-container\">\\r\\n';\r\n\t\tactors.actors.forEach(actor => {\r\n\t\t\tholder.innerHTML += '<button class=\"def-button\" onclick=\"loadDevice(false,\\'' + actor.description.name + '\\',' +  actor.positionID +')\">' + actor.description.name + '</button>';\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Loads a device for configuration\r\nfunction loadDevice(isSensor, name, posID) {\r\n\tconst holder = document.getElementById(\"device\");\r\n\tholder.dataset.posid = posID;\r\n\tholder.dataset.sensor = isSensor;\r\n\tholder.innerHTML = '<h2>' + name + '</h2>';\r\n\tlet path = \"/actors/config\";\r\n\tlet dataName = \"actor\";\r\n\tif (isSensor) {\r\n\t\tpath = \"/sensors/config\";\r\n\t\tdataName = \"sensor\";\r\n\t}\r\n\tdata = {};\r\n\tdata[dataName] = posID;\r\n\tGETRequest(path, addDeviceConfig, data);\r\n}\r\n\r\n// Adds a device configuration to the page\r\nfunction addDeviceConfig(device) {\r\n\tconst holder = document.getElementById(\"device\");\r\n\tlet buttons = '<div class=\"button-container\">';\r\n\tif (Object.keys(device).length === 0 ) {\r\n\t\tholder.innerHTML = '<p>No configurable options</p>';\r\n\t} else {\r\n\t\tfor (let opt in device) {\r\n\t\t\tlet type = \"text\";\r\n\t\t\tlet step = 1;\r\n\t\t\tlet additionalAttrb = \"\";\r\n\t\t\tlet name = opt.replace(\" \", \"_\");\r\n\t\t\tif (typeof(device[opt]) === \"object\") {\r\n\t\t\t\tlet newhtml = '<div class=\"stacked-input\">\\\r\n\t\t\t\t<label for=\"' + name + '\">' + opt + '</label>\\\r\n\t\t\t\t<select class=\"normal-input\" name=\"' + name + '\">';\r\n\t\t\t\tdevice[opt].options.forEach((value) => {\r\n\t\t\t\t\tif (value === device[opt].current) {\r\n\t\t\t\t\t\tnewhtml += '<option class=\"normal-input\" value=\"' + value + '\" selected>' + value + '</option>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewhtml += '<option class=\"normal-input\" value=\"' + value + '\">' + value + '</option>';\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tnewhtml += '</select></div>'\r\n\t\t\t\tholder.innerHTML += newhtml;\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof(device[opt]) === \"number\") {\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\tif (!Number.isInteger(device[opt])) {\r\n\t\t\t\t\t\tstep = 0.01;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (typeof(device[opt]) === \"boolean\") {\r\n\t\t\t\t\ttype = \"checkbox\";\r\n\t\t\t\t\tif (device[opt] === true) {\r\n\t\t\t\t\t\tadditionalAttrb= \"checked\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (typeof(device[opt]) === \"string\") {\r\n\t\t\t\t\tdevice[opt] = device[opt].replaceAll('\"', '&quot;');\r\n\t\t\t\t}\r\n\t\t\t\tholder.innerHTML += '<div class=\"stacked-input\"><label for=\"' + name + '\">' + opt + '</label>\\\r\n\t\t\t\t<input class=\"normal-input\" type=\"' + type + '\" name=\"' + name + '\" step=\"' + step + '\" value=\"' + device[opt] + '\" ' + additionalAttrb +'></div>';\r\n\t\t\t}\r\n\t\t}\r\n\t\tbuttons += '<button class=\"def-button\" onclick=\"updateDeviceConfig(' + holder.dataset.sensor + ',' + holder.dataset.posid + ')\">Update Config</button>';\r\n\t}\r\n\tif (holder.dataset.sensor === 'true') {\r\n\t\tconsole.log(holder.dataset.posid);\r\n\t\tbuttons += '<a class=\"def-button\" href=\"/calibrate.html?id=' + holder.dataset.posid + '\">Calibrate</a>';\r\n\t}\r\n\tbuttons += '</div>';\r\n\tholder.innerHTML += buttons;\r\n}\r\n\r\n// Parses and updates config for device\r\nfunction updateDeviceConfig(isSensor, posID) {\r\n\tlet inputs = document.querySelectorAll('#device input');\r\n\tlet new_config = {};\r\n\tArray.from(inputs).forEach((input) => {\r\n\t\tif (input.type === \"number\") {\r\n\t\t\tnew_config[input.name] = input.valueAsNumber;\r\n\t\t} else if (input.type === \"checkbox\") {\r\n\t\t\tnew_config[input.name] = input.checked;\r\n\t\t} else {\r\n\t\t\tnew_config[input.name] = input.value;\r\n\t\t}\r\n\t});\r\n\tinputs = document.querySelectorAll('#device select');\r\n\tArray.from(inputs).forEach((input) => {\r\n\t\tnew_config[input.name] = {\"current\": input.value};\r\n\t});\r\n\tconsole.log(new_config);\r\n\tif (isSensor) {\r\n\t\tPOSTRequest('/sensors/config', \"Device config updated!\", {'sensor': posID, 'config': JSON.stringify(new_config)});\r\n\t} else {\r\n\t\tPOSTRequest('/actors/config', \"Device config updated!\", {'actor': posID, 'config': JSON.stringify(new_config)});\r\n\t}\r\n}",
  "/www/devices.html": "\t<!--\r\n\tThis file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\n\tContributors: Sam Groveman\r\n\t-->\r\n\t<!DOCTYPE html>\r\n\t<html lang=\"en-us\">\r\n\t<head>        \r\n\t\t<link rel=\"stylesheet\" href=\"/main.css\">\r\n\t\t<script src=\"/ajax-script.js\"></script>\r\n\t\t<script src=\"/devices-script.js\"></script>\r\n\t\t<title>ESP32 Device Hub | Device Manager</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"wrapper\">\r\n\t\t\t<div class=\"home-button-container\">\r\n\t\t\t\t<a class=\"def-button\" href=\"/\">Home</a>\r\n\t\t\t</div>\r\n\t\t\t<h1>Device Manager</h1>\r\n\t\t\t<h2>Select a device to manage it</h2>\r\n\t\t\t<div id=\"message\"></div>\r\n\t\t\t<div id=\"device\"></div>\r\n\t\t\t<h2>Sensors</h2>\r\n\t\t\t<div id=\"sensors\" class=\"button-container\">\r\n\t\t\t</div>\r\n\t\t\t<h2>Actors</h2>\r\n\t\t\t<div id=\"actors\" class=\"button-container\">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</body>\r\n\t</html>",
  "/www/index-script.js": "/*\r\n * This file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\n * Contributors: Sam Groveman\r\n */\r\n\r\n// Run code when page DOM is loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n\t// Attach button handlers\r\n\tdocument.getElementById(\"reboot\").onclick = function() {\r\n\t\tPUTRequest('/reboot', 'Success, rebooting!');\r\n\t};\r\n\r\n\tdocument.getElementById(\"reset\").onclick = function() {\r\n\t\tif (confirm(\"Reset WiFi settings?\") == true) {\r\n\t\t\tPUTRequest('/reset', 'Success, rebooting!');\r\n\t\t}\r\n\t};\r\n\t\r\n\tdocument.getElementById(\"settime\").onclick = function() {\r\n\t\tPOSTRequest('/time', \"Time set\", { time:  Math.floor(new Date().getTime() / 1000) });\r\n\t};\r\n\r\n});",
  "/www/index.html": "<!--\r\nThis file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\nContributors: Sam Groveman\r\n-->\r\n<!DOCTYPE html>\r\n<html lang=\"en-us\">\r\n\t<head>        \r\n\t\t<link rel=\"stylesheet\" href=\"/main.css\">\r\n\t\t<script src=\"/ajax-script.js\"></script>\r\n\t\t<script src=\"/index-script.js\"></script>\r\n\t\t<title>ESP32 Device Hub</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"wrapper\">\r\n\t\t\t<h1>ESP32 Device Hub</h1>\r\n\t\t\t<h2>Use the buttons below to manage your device.</h2>\r\n\t\t\t<div id=\"message\"></div>\r\n\t\t\t<div class=\"button-container\">\r\n\t\t\t\t<a class=\"def-button\" href=\"/parameters.html\">Sensor Parameters</a>\r\n\t\t\t\t<a class=\"def-button\" href=\"/actions.html\">Actions</a>\r\n\t\t\t\t<hr style=\"width:95%\">\r\n\t\t\t\t<button class=\"def-button\" id=\"settime\">Set Time On Device</button>\r\n\t\t\t\t<a class=\"def-button\" href=\"/devices.html\">Device Manager</a>\r\n\t\t\t\t<a class=\"def-button\" href=\"/storage.html\">Storage Manager</a>\r\n\t\t\t\t<a class=\"def-button\" href=\"/config.html\">Hub Configuration</a>\r\n\t\t\t\t<hr style=\"width:95%\">\r\n\t\t\t\t<a class=\"def-button\" href=\"/update\">Update Firmware</a>\r\n\t\t\t\t<button class=\"def-button\" id=\"reboot\">Reboot Device</button>\r\n\t\t\t\t<button class=\"def-button\" id=\"reset\">Reset WiFi Settings</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</body>\r\n</html>",
  "/www/main.css": "/*\r\n * This file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\n * Contributors: Sam Groveman\r\n */\r\n\r\n#message {\r\n\tfont-size: 1.3em;\r\n\tfont-weight: bolder;\r\n}\r\n\r\nbody {\r\n\tbackground: #3498db;\r\n\tfont-family: sans-serif;\r\n\tfont-size: 1.2em;\r\n\tcolor: #777;\r\n}\r\n\r\n#wrapper {\r\n\tbackground: #fff;\r\n\tmax-width: 36em;\r\n\tmin-width: 26em;\r\n\tmargin: 25px auto;\r\n\tpadding: 30px;\r\n\tborder-radius: 5px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-container {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n}\r\n\r\n.def-button {\r\n\tmax-width: 25em;\r\n\tborder-radius: 4px;\r\n\tmargin: 10px;\r\n\tfont-size: 1.3em;\r\n\tbackground: #3498db;\r\n\tcolor: #fff;\r\n\tcursor: pointer;\r\n\tborder: 0;\r\n\tline-height: 44px;\r\n\ttext-decoration: none;\r\n\twidth: 100%;\r\n}\r\n\r\n.home-button-container {\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\talign-items: left;\r\n\twidth: 20%;\r\n}\r\n\r\n#up-file {\r\n\tmax-width: 600px;\r\n\theight: 44px;\r\n\tborder-radius: 4px;\r\n\tmargin: 10px auto;\r\n\tfont-size: 17px;\r\n\tpadding: 0;\r\n\tborder: 1px solid #ddd;\r\n\tline-height: 44px;\r\n\ttext-align: left;\r\n\tdisplay: block;\r\n\tcursor: pointer;\r\n}\r\n\r\n#up-bar, #up-progress {\r\n\tbackground-color: #f1f1f1;\r\n\tborder-radius: 10px;\r\n\tposition: relative;\r\n}\r\n\r\n#up-progress {\r\n\tmargin: 10px auto;\r\n\tmax-width: 600px;\r\n}\r\n\r\n#up-bar {\r\n\tbackground-color: #3498db;\r\n\twidth: 0%;\r\n\theight: 30px;\r\n}\r\n\r\n#up-percent {\r\n\tposition: absolute;\r\n\ttop: 6px;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\ttext-shadow: -1px 1px 0 #000, 1px 1px 0 #000, 1px -1px 0 #000, -1px -1px 0 #000;\r\n\tcolor: #fff;\r\n}\r\n\r\n.large-text {\r\n\tfont-size: 18px;\r\n}\r\n\r\ntable {\r\n\tmargin: 0 auto;\r\n\tborder-radius: 4px;\r\n\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n\tpadding: 0;\r\n\tborder: 1px solid #ddd;\r\n}\r\n\r\ntd, th {\r\n\tborder: 1px solid #ddd;\r\n\tpadding: 0.3em;\r\n}\r\n\r\ntd {\r\n\ttext-align: left;\r\n}\r\n\r\n.file {\r\n\tfont-size: 20px;\r\n\tmargin: 5px;\r\n\ttext-align: left;\r\n}\r\n\r\n.file td {\r\n\tpadding: 5px 10px;\r\n}\r\n\r\n.delete, .download {\r\n\tcursor: pointer;\r\n\ttext-decoration: underline;\r\n}\r\n\r\n.delete {\r\n\tcolor: red; \r\n}\r\n\r\n.download {\r\n\tcolor: blue;\r\n}\r\n\r\n.normal-input {\r\n\tmargin: 8px auto;\r\n\tpadding: 12px 20px;\r\n\tborder: 1px solid #9b97a3;\r\n\tborder-radius: 4px;\r\n\tbox-sizing: border-box;\r\n\tfont-size: 20px;\r\n}\r\n\r\n.stacked-input {\r\n\tdisplay: block;\r\n}\r\n",
  "/www/parameters-script.js": "/*\r\n* This file is licensed under the GPLv3 License Copyright (c) 2025 Sam Groveman\r\n* Contributors: Sam Groveman\r\n*/\r\n\r\n// Run code when page DOM is loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\tdocument.getElementById(\"refresh\").onclick = function() {\r\n\t\tGETRequest(\"/sensors/measurement?update\", addParameters);\r\n\t}\r\n\tGETRequest(\"sensors/measurement\", addParameters);\r\n\r\n});\r\n\r\n\r\n// Adds all connected sensors to the page\r\nfunction addParameters(parameters) {\r\n\tconst holder = document.getElementById(\"parameters\");\r\n\tlet html = '';\r\n\tif (parameters.measurements.length === 0) {\r\n\t\thtml ='<p>No active sensors</p>';\r\n\t} else {\r\n\t    html = '<table><tr><th>Name</th><th>Parameter</th><th>Value</th><th>Unit</th></tr>';\r\n\t\tparameters.measurements.forEach(parameter => {\r\n\t\t\t\thtml += '<tr><td>' + parameter.name + '</td><td>' + parameter.parameter + '</td><td>' + parameter.value + '</td><td>' + parameter.unit + '</td></tr>';\r\n\t\t});\r\n\t\thtml += '</table>';\r\n\t}\r\n\tholder.innerHTML = html;\r\n}\r\n",
  "/www/parameters.html": "\t<!--\r\n\tThis file is licensed under the GPLv3 License Copyright (c) 2025 Sam Groveman\r\n\tContributors: Sam Groveman\r\n\t-->\r\n\t<!DOCTYPE html>\r\n\t<html lang=\"en-us\">\r\n\t<head>        \r\n\t\t<link rel=\"stylesheet\" href=\"/main.css\">\r\n\t\t<script src=\"/ajax-script.js\"></script>\r\n\t\t<script src=\"/parameters-script.js\"></script>\r\n\t\t<title>ESP32 Device Hub | Sensor Parameters</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"wrapper\">\r\n\t\t\t<div class=\"home-button-container\">\r\n\t\t\t\t<a class=\"def-button\" href=\"/\">Home</a>\r\n\t\t\t</div>\r\n\t\t\t<h1>Sensor Parameters</h1>\r\n\t\t\t<div id=\"message\"></div>\r\n\t\t\t<div class=\"button-container\">\r\n\t\t\t\t<button class=\"def-button\" id=\"refresh\">Refresh Data</button>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"parameters\"></div>\r\n\t\t</div>\r\n\t</body>\r\n\t</html>",
  "/www/storage-script.js": "/*\r\n* This file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\n* Contributors: Sam Groveman\r\n*/\r\n\r\n// Run code when page DOM is loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\t// Initialize the upload handler\r\n\tuprog.init();\r\n\r\n\t// Get server info\r\n\tgetFreeStorage();\r\n\tupdateFileList();\r\n\r\n\t// Attach button handlers\r\n\tdocument.getElementById(\"up-www\").onclick = function() {\r\n\t\tuprog.upload('/www');\r\n\t};\r\n\tdocument.getElementById(\"backup\").onclick = function() {\r\n\t\tdownloadBackup();\r\n\t};\r\n\tdocument.getElementById(\"restore\").onclick = function() {\r\n\t\trestoreBackup();\r\n\t};\r\n});\r\n\r\n// Update the list of files displayed on this page\r\nfunction updateFileList() {\r\n\tdocument.getElementById(\"file-list\").innerHTML = \"\";\r\n\tgetFileList(\"/\", 5);\r\n}\r\n\r\n// Get list of files\r\nfunction getFileList(filePath, traverseDepth = 0) {\r\n\tGETRequest(\"/list\", addFileList, { path: filePath, depth: 0 });\r\n\tGETRequest(\"/list\", addDirs, { path: filePath, type: 1, depth: traverseDepth });\r\n}\r\n\r\nlet filesLoaded = false;\r\n\r\n// Processes each directory one by one\r\nasync function addDirs(response) {\r\n\tif (response != null) {\r\n\t\tfor (let i = 0; i < response.list.length; i++)\r\n\t\t{\r\n\t\t\twhile (!filesLoaded) {\r\n\t\t\t\tawait new Promise(r => setTimeout(r, 10));\r\n\t\t\t}\r\n\t\t\tfilesLoaded = false;\r\n\t\t\tGETRequest(\"/list\", addFileList, { path: response.list[i], type: 0, depth: 0 });\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Callback for receiving file list data\r\nasync function addFileList(response) {\r\n\tif (response != null) {\r\n\t\tlet list = document.getElementById(\"file-list\");\r\n\t\tfor (let i = 0; i < response.list.length; i++)\r\n\t\t{\r\n\t\t\tlist.innerHTML += `\r\n\t\t\t<tr class=\"file\">\r\n\t\t\t\t<td>` + response.list[i] + `</td>\r\n\t\t\t\t<td class=\"download\"><a href=\"/download?path=` + response.list[i] + `\">Download</a>\r\n\t\t\t\t<td class=\"delete\" onclick=\"deleteFile(this)\" data-name=\"` + response.list[i] + `\">Delete</td>\r\n\t\t\t</tr>`;\r\n\t\t}\r\n\t}\r\n\tawait new Promise(r => setTimeout(r, 10));\r\n\tfilesLoaded = true;\r\n}\r\n\r\n// Delete file\r\nfunction deleteFile(file) {\r\n\tlet name = file.dataset.name;\r\n\tif (confirm(\"Delete \" + name + \"?\")) {\r\n\t\tPOSTRequest(\"/delete\", \"File deleted!\", { path: name }, fileDeleted);\r\n\t}\r\n}\r\n\r\n// Callback for file being deleted\r\nfunction fileDeleted(response) {\r\n\tlet file = document.querySelector('[data-name=\"' + response.file + '\"]');\r\n\tdocument.getElementById('message').innerHTML = 'File deleted!';\r\n\tfile.parentNode.remove();\r\n\tgetFreeStorage()\r\n}\r\n\r\n// Gets free storage space on device\r\nfunction getFreeStorage() {\r\n\tGETRequest(\"/freeSpace\", addFreeSpace);\r\n}\r\n\r\n// Callback for receiving free storage space\r\nfunction addFreeSpace(response) {\r\n\tif (response != null) {\r\n\t\tlet space = document.getElementById(\"freespace\");\r\n\t\tspace.innerHTML = 'Free space: ' + response.space + ' bytes';\r\n\t}\r\n}\r\n\r\n// Prepares a JSON file of all the config files for download\r\nasync function downloadBackup() {\r\n\tconst files = document.querySelectorAll('.file');\r\n\tlet backups = {};\r\n\tlet dots = 1;\r\n\tfor (const file of files) {\r\n\t\tdocument.getElementById('message').innerHTML = 'Backing up, please wait'\r\n\t\tfor (let i = 0; i < dots; i++) {\r\n\t\t\tdocument.getElementById('message').innerHTML += '.';\r\n\t\t}\r\n\t\tif (dots == 4) {\r\n\t\t\tdots = 0;\r\n\t\t} else {\r\n\t\t\tdots++;\r\n\t\t}\r\n\t\tlet response = await fetch(file.querySelector('.download a').getAttribute('href'));\r\n\t\tif (!response.ok) {\r\n\t\t\tconsole.log(`Response status: ${response.status}`);\r\n\t\t\tdocument.getElementById('message').innerHTML = 'Could not complete backup';\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbackups[file.querySelector('.delete').dataset.name] = await response.text();\r\n\t\tawait new Promise(r => setTimeout(r, 50));\r\n\t}\r\n\tconst a = document.createElement('a');\r\n\ta.href = URL.createObjectURL( new Blob([JSON.stringify(backups, null, 2)], { type:'application/json' }) );\r\n\ta.download = \"Backup.json\";\r\n\ta.click();\r\n\ta.remove();\r\n\tdocument.getElementById('message').innerHTML = 'Backup successful!'\r\n}\r\n\r\n// Restores a backup from a JSON file\r\nasync function restoreBackup() {\r\n\tconst selectedFile = document.getElementById(\"up-file\").files[0];\r\n\tconst reader = new FileReader();\r\n\tdocument.getElementById('message').innerHTML = 'Beginning restore...';\r\n\treader.onload = async function(file) {\r\n\t\tlet files = JSON.parse(file.target.result);\r\n\t\tlet restored = false;\r\n\t\tfor (let file in files) {\r\n\t\t\tPOSTRequest('/restorefile', 'File ' + file + ' restored', {\"path\": file, \"contents\": files[file]}, async function() {\r\n\t\t\t\tawait new Promise(r => setTimeout(r, 50))\r\n\t\t\t\trestored = true;\r\n\t\t\t});\r\n\t\t\t// Wait for file to be restored before proceeding\r\n\t\t\twhile (!restored) {\r\n\t\t\t\tawait new Promise(r => setTimeout(r, 50));\r\n\t\t\t}\r\n\t\t\trestored = false;\r\n\t\t}\r\n\t\tdocument.getElementById('message').innerHTML = 'Restore successful!';\r\n\t\tgetFreeStorage();\r\n\t\tupdateFileList();\r\n\t};\r\n\treader.readAsText(selectedFile);\r\n}",
  "/www/storage.html": "<!--\r\nThis file is licensed under the GPLv3 License Copyright (c) 2024 Sam Groveman\r\nContributors: Sam Groveman\r\n-->\r\n<!DOCTYPE html>\r\n<html lang=\"en-us\">\r\n\t<head>        \r\n\t\t<link rel=\"stylesheet\" href=\"/main.css\">\r\n\t\t<title>ESP32 Device Hub | Storage Management</title>\r\n\t\t<script src=\"/ajax-script.js\"></script>\r\n\t\t<script src=\"/storage-script.js\"></script>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"wrapper\">\r\n\t\t\t<div class=\"home-button-container\">\r\n\t\t\t\t<a class=\"def-button\" href=\"/\">Home</a>\r\n\t\t\t</div>\r\n\t\t\t<h1>Storage Manager</h1>\r\n\t\t\t<div id=\"upload\">\r\n\t\t\t\t<h2>Select a file to upload it to the device.</h2>\r\n\t\t\t\t<h2 id=\"freespace\"></h2>\r\n\t\t\t\t<div id=\"up-progress\">\r\n\t\t\t\t\t<div id=\"up-bar\"></div>\r\n\t\t\t\t\t<div id=\"up-percent\">0%</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input type=\"file\" id=\"up-file\" disabled>\r\n\t\t\t\t<div id=\"message\"></div>\r\n\t\t\t\t<div class=\"button-container\">\r\n\t\t\t\t\t<button class=\"def-button\" id=\"up-www\">Upload to WWW</button>\r\n\t\t\t\t\t<button class=\"def-button\" id=\"backup\">Backup</button>\r\n\t\t\t\t\t<button class=\"def-button\" id=\"restore\">Restore</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"manage\">\r\n\t\t\t\t<h2>File List</h2>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tbody id=\"file-list\">\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</body>\r\n</html>"
}